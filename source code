None selected 

Skip to content
Using Gmail with screen readers
in:sent 
Enable desktop notifications for Gmail.
   OK  No thanks
Conversations
23% of 15 GB used
Terms · Privacy · Program Policies
Last account activity: 6 minutes ago
Details
import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt
# Step 1: Load MNIST dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize the images to a range of [0, 1] by dividing by 255
x_train, x_test = x_train / 255.0, x_test / 255.0
# Step 2: Build a simple Convolutional Neural Network (CNN) Model

model = models.Sequential([
    # 1st Convolutional Layer
    layers.Reshape((28, 28, 1), input_shape=(28, 28)),
    layers.Conv2D(32, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    # 2nd Convolutional Layer
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    # 3rd Convolutional Layer
    layers.Conv2D(64, (3, 3), activation='relu'),

    # Flatten the output for dense layers
    layers.Flatten(),
    
    # Fully connected layers
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')  # Output layer with 10 classes for digits 0-9
])
# Step 3: Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
# Step 4: Train the model
model.fit(x_train, y_train, epochs=5)

# Step 5: Evaluate the model on the test data
test_loss, test_acc = model.evaluate(x_test, y_test)

print(f"Test accuracy: {test_acc}")
# Step 6: Visualize some predictions
predictions = model.predict(x_test)

# Show a random image from the test set and the predicted label
for i in range(5):  # Display 5 random predictions
    plt.imshow(x_test[i], cmap=plt.cm.binary)
    plt.title(f"Prediction: {np.argmax(predictions[i])}, True Label: {y_test[i]}")
    plt.show()
source code.txt
Displaying source code.txt.
